import numpy as np
import argparse
import os
import h5py
import pyarrow.parquet as pq
import glob
from tqdm.contrib.concurrent import process_map
from functools import partial

DTYPES=dict(
    SOURCE=dict(
        ag_gspphot                        ="float32",
        ag_gspphot_lower                  ="float32",
        ag_gspphot_upper                  ="float32",
        astrometric_chi2_al               ="float32",
        astrometric_excess_noise          ="float32",
        astrometric_excess_noise_sig      ="float32",
        astrometric_gof_al                ="float32",
        astrometric_matched_transits      ="int16",
        astrometric_n_bad_obs_al          ="int16",
        astrometric_n_good_obs_al         ="int16",
        astrometric_n_obs_ac              ="int16",
        astrometric_n_obs_al              ="int16",
        astrometric_params_solved         ="int8",
        astrometric_primary_flag          ="int32",
        astrometric_sigma5d_max           ="float32",
        azero_gspphot                     ="float32",
        azero_gspphot_lower               ="float32",
        azero_gspphot_upper               ="float32",
        b                                 ="float64",
        bp_g                              ="float32",
        bp_rp                             ="float32",
        classprob_dsc_combmod_galaxy      ="float32",
        classprob_dsc_combmod_quasar      ="float32",
        classprob_dsc_combmod_star        ="float32",
        dec                               ="float64",
        dec_error                         ="float32",
        dec_parallax_corr                 ="float32",
        dec_pmdec_corr                    ="float32",
        dec_pmra_corr                     ="float32",
        dec_pseudocolour_corr             ="float32",
        distance_gspphot                  ="float32",
        distance_gspphot_lower            ="float32",
        distance_gspphot_upper            ="float32",
        duplicated_source                 ="int32",
        ebpminrp_gspphot                  ="float32",
        ebpminrp_gspphot_lower            ="float32",
        ebpminrp_gspphot_upper            ="float32",
        ecl_lat                           ="float64",
        ecl_lon                           ="float64",
        g_rp                              ="float32",
        grvs_mag                          ="float32",
        grvs_mag_error                    ="float32",
        grvs_mag_nb_transits              ="int16",
        has_epoch_photometry              ="int32",
        has_epoch_rv                      ="int32",
        has_mcmc_gspphot                  ="int32",
        has_mcmc_msc                      ="int32",
        has_rvs                           ="int32",
        has_xp_continuous                 ="int32",
        has_xp_sampled                    ="int32",
        in_andromeda_survey               ="int32",
        in_galaxy_candidates              ="int32",
        in_qso_candidates                 ="int32",
        ipd_frac_multi_peak               ="int8",
        ipd_frac_odd_win                  ="int8",
        ipd_gof_harmonic_amplitude        ="float32",
        ipd_gof_harmonic_phase            ="float32",
        l                                 ="float64",
        libname_gspphot                   ="int8",
        logg_gspphot                      ="float32",
        logg_gspphot_lower                ="float32",
        logg_gspphot_upper                ="float32",
        matched_transits                  ="int16",
        matched_transits_removed          ="int16",
        mh_gspphot                        ="float32",
        mh_gspphot_lower                  ="float32",
        mh_gspphot_upper                  ="float32",
        new_matched_transits              ="int16",
        non_single_star                   ="int16",
        nu_eff_used_in_astrometry         ="float32",
        parallax                          ="float64",
        parallax_error                    ="float32",
        parallax_over_error               ="float32",
        parallax_pmdec_corr               ="float32",
        parallax_pmra_corr                ="float32",
        parallax_pseudocolour_corr        ="float32",
        phot_bp_mean_flux                 ="float64",
        phot_bp_mean_flux_error           ="float32",
        phot_bp_mean_flux_over_error      ="float32",
        phot_bp_mean_mag                  ="float32",
        phot_bp_n_blended_transits        ="int16",
        phot_bp_n_contaminated_transits   ="int16",
        phot_bp_n_obs                     ="int16",
        phot_bp_rp_excess_factor          ="float32",
        phot_g_mean_flux                  ="float64",
        phot_g_mean_flux_error            ="float32",
        phot_g_mean_flux_over_error       ="float32",
        phot_g_mean_mag                   ="float32",
        phot_g_n_obs                      ="int16",
        phot_proc_mode                    ="int8",
        phot_rp_mean_flux                 ="float64",
        phot_rp_mean_flux_error           ="float32",
        phot_rp_mean_flux_over_error      ="float32",
        phot_rp_mean_mag                  ="float32",
        phot_rp_n_blended_transits        ="int16",
        phot_rp_n_contaminated_transits   ="int16",
        phot_rp_n_obs                     ="int16",
        phot_variable_flag                ="int8",
        pm                                ="float32",
        pmdec                             ="float64",
        pmdec_error                       ="float32",
        pmdec_pseudocolour_corr           ="float32",
        pmra                              ="float64",
        pmra_error                        ="float32",
        pmra_pmdec_corr                   ="float32",
        pmra_pseudocolour_corr            ="float32",
        pseudocolour                      ="float32",
        pseudocolour_error                ="float32",
        ra                                ="float64",
        ra_dec_corr                       ="float32",
        ra_error                          ="float32",
        ra_parallax_corr                  ="float32",
        ra_pmdec_corr                     ="float32",
        ra_pmra_corr                      ="float32",
        ra_pseudocolour_corr              ="float32",
        radial_velocity                   ="float32",
        radial_velocity_error             ="float32",
        random_index                      ="int64",
        ref_epoch                         ="float64",
        ruwe                              ="float32",
        rv_amplitude_robust               ="float32",
        rv_atm_param_origin               ="int16",
        rv_chisq_pvalue                   ="float32",
        rv_expected_sig_to_noise          ="float32",
        rv_method_used                    ="int8",
        rv_nb_deblended_transits          ="int16",
        rv_nb_transits                    ="int16",
        rv_renormalised_gof               ="float32",
        rv_template_fe_h                  ="float32",
        rv_template_logg                  ="float32",
        rv_template_teff                  ="float32",
        rv_time_duration                  ="float32",
        rv_visibility_periods_used        ="int16",
        rvs_spec_sig_to_noise             ="float32",
        scan_direction_mean_k1            ="float32",
        scan_direction_mean_k2            ="float32",
        scan_direction_mean_k3            ="float32",
        scan_direction_mean_k4            ="float32",
        scan_direction_strength_k1        ="float32",
        scan_direction_strength_k2        ="float32",
        scan_direction_strength_k3        ="float32",
        scan_direction_strength_k4        ="float32",
        solution_id                       ="int64",
        source_id                         ="int64",
        teff_gspphot                      ="float32",
        teff_gspphot_lower                ="float32",
        teff_gspphot_upper                ="float32",
        vbroad                            ="float32",
        vbroad_error                      ="float32",
        vbroad_nb_transits                ="int16",
        visibility_periods_used           ="int16",
    ),
    XP = dict(
        bp_basis_function_id         = "int16",
        bp_chi_squared               = "float32",
        bp_coefficient_correlations  = "<f4",
        bp_coefficient_errors        = "<f4",
        bp_coefficients              = "<f8",
        bp_degrees_of_freedom        = "int16",
        bp_n_measurements            = "int16",
        bp_n_parameters              = "int8",
        bp_n_rejected_measurements   = "int16",
        bp_n_relevant_bases          = "int16",
        bp_relative_shrinking        = "float32",
        bp_standard_deviation        = "float32",
        dec                          = "float64",
        ra                           = "float64",
        rp_basis_function_id         = "int16",
        rp_chi_squared               = "float32",
        rp_coefficient_correlations  = "<f4",
        rp_coefficient_errors        = "<f4",
        rp_coefficients              = "<f8",
        rp_degrees_of_freedom        = "int16",
        rp_n_measurements            = "int16",
        rp_n_parameters              = "int8",
        rp_n_rejected_measurements   = "int16",
        rp_n_relevant_bases          = "int16",
        rp_relative_shrinking        = "float32",
        rp_standard_deviation        = "float32",
        solution_id                  = "int64",
        source_id                    = "int64",
    ),
    RVS = dict(
        combined_ccds     = "int16",
        combined_transits = "int16",
        deblended_ccds    = "int16",
        dec               = "float64",
        flux              = "<f4",
        flux_error        = "<f4",
        ra                = "float64",
        solution_id       = "int64",
        source_id         = "int64",
    )
)

def parquet_to_hdf5(parquet_file, dset_name):
    table = pq.read_table(parquet_file, memory_map=True)
    with h5py.File(parquet_file.replace(".parquet", ".hdf5"), "w") as f:
        for col in table.column_names:
            f.create_dataset(col, data=np.stack(np.asarray(table[col])), dtype=DTYPES[dset_name][col])


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Convert parquet files to hdf5")
    parser.add_argument("--input_dir", type=str, help="directory to parquet files")
    parser.add_argument("--num_workers", type=int, help="number of workers to use", default=os.cpu_count())
    args = parser.parse_args()

    parquet_files = dict(
        SOURCE=glob.glob(f"{args.input_dir}/dr3_source/*/*.parquet"),
        XP=glob.glob(f"{args.input_dir}/dr3_xp/*/*.parquet"),
        RVS=glob.glob(f"{args.input_dir}/dr3_rvs/*/*.parquet")
    )

    for dset_name, files in parquet_files.items():
        process_map(partial(parquet_to_hdf5, dset_name=dset_name), files, max_workers=args.num_workers, chunksize=1, desc=f"Converting {dset_name} to hdf5")

